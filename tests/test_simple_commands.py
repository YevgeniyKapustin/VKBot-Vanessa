from vanessa import navigation
from vanessa.commands_logic.randomize import *
from vanessa.links import *
import pytest
test_chat_id = 4
banan = '–ë–∞–Ω–∞ÃÅ–Ω ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—ä–µ–¥–æ–±–Ω—ã—Ö –ø–ª–æ–¥–æ–≤ –∫—É–ª—å—Ç–∏–≤–∏—Ä—É–µ–º—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π —Ä–æ–¥–∞ –ë–∞–Ω–∞–Ω (Musa); –æ–±—ã—á–Ω–æ –ø–æ–¥ —Ç–∞–∫–æ–≤—ã–º–∏ –ø–æ–Ω–∏–º–∞—é—Ç Musa acuminata –∏ Musa √ó paradisiaca, –∞ —Ç–∞–∫–∂–µ Musa balbisiana, Musa fehi, Musa troglodytarum –∏ —Ä—è–¥ –¥—Ä—É–≥–∏—Ö. –¢–∞–∫–∂–µ –±–∞–Ω–∞–Ω–∞–º–∏ –º–æ–≥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å –ø–ª–æ–¥—ã Ensete ventricosum (—Å—Ç—Ä–æ–≥–æ –≥–æ–≤–æ—Ä—è, —è–≤–ª—è—é—â–µ–≥–æ—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –¥—Ä—É–≥–æ–≥–æ —Ä–æ–¥–∞ —Å–µ–º–µ–π—Å—Ç–≤–∞ –ë–∞–Ω–∞–Ω–æ–≤—ã–µ). –° –±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –±–∞–Ω–∞–Ω —è–≤–ª—è–µ—Ç—Å—è —è–≥–æ–¥–æ–π, –º–Ω–æ–≥–æ—Å–µ–º–µ–Ω–Ω–æ–π –∏ —Ç–æ–ª—Å—Ç–æ–∫–æ–∂–µ–π.'
simple_commands = [
    (test_chat_id, '–∫–∞–ø—É—Å—Ç–∞', '—ç—Ö–±'),
    (test_chat_id, '—Å—É—Å', gif_sus),
    (test_chat_id, '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', gif_free),
    (test_chat_id, '—Ä–µ–∑–Ω—è', img_carnage),
    (test_chat_id, '–∑–æ–º–±–∏ –≤ —Ç–æ–ø–µ', img_zombie),
]


@pytest.mark.parametrize('chat_id, command, expect_response', simple_commands)
def test_simple_commands(chat_id, command, expect_response):
    assert navigation.response_definition(chat_id, command, 0, 0) == expect_response


@pytest.mark.parametrize('chat_id, command', [(test_chat_id, '–∞–±–æ–±–∞')])
def test_complex_commands(chat_id, command):
    assert navigation.response_definition(chat_id, command, 0, 0) in zmiysphrases


@pytest.mark.parametrize('chat_id, command', [(test_chat_id, '–¥12')])
def test_dice(chat_id, command):
    response = int(navigation.response_definition(chat_id, command, 0, 0).replace('üé≤', ''))
    assert response in range(int(command.replace('–¥', ''))+1)


@pytest.mark.parametrize('chat_id, command', [(test_chat_id, '—Ñ—Ä–∞–∫—Ü–∏—è'), (test_chat_id, '–Ω–∞–≤—ã–∫')])
def test_heroes_helper(chat_id, command):
    response = navigation.response_definition(chat_id, command, 0, 0).replace('üé≤ ', '')
    assert response in herofractions or response in position


@pytest.mark.parametrize('chat_id, command, expect_response', [(test_chat_id, '—á—Ç–æ —Ç–∞–∫–æ–µ –±–∞–Ω–∞–Ω', banan)])
def test_wiki(chat_id, command, expect_response):
    assert navigation.response_definition(chat_id, command, 0, 0) == expect_response
