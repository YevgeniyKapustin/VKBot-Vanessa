import json
from random import randint, choice


from vkbottle.bot import Message
from vkbottle.framework.labeler import BotLabeler

from src.rules import DiceRule
from src.services import create_response_json, get_data
from src.constants import civilizations, zmiys_phrases, hero_fractions
from src.utils import web_query

bl = BotLabeler()


@bl.message(text='—Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è')
async def random_civ_from_civ6(message: Message):
    """Select and sends a random phrase of the good person to the chat."""
    await message.answer(f'üé≤ {choice(civilizations)}')


@bl.message(text='–∞–±–æ–±–∞')
async def random_zmiys_phrases(message: Message):
    """Select and sends a random phrase of the good person to the chat."""
    await message.answer(f'{choice(zmiys_phrases)}')


@bl.message(text='—Ñ—Ä–∞–∫—Ü–∏—è')
async def random_fraction(message: Message):
    """Send a random faction from the hero_fractions."""
    await message.answer(f'üé≤ {choice(hero_fractions)}')


@bl.message(DiceRule())
async def roll_dice(message: Message):
    """Send the result from 1 to the number after '–¥'."""
    await message.answer(f'üé≤ {randint(1, int(message.text.replace("–¥", "")))}')


@bl.message(text='–¥–æ–±–∞–≤–∏—Ç—å<type_> –∫–æ–º–∞–Ω–¥—É<request>:<response>')
async def add_command(
        message: Message,
        type_: str,
        request: str,
        response: str
):
    type_ = 'contextual' if type_ == '_' else 'normal'
    if request:
        res = await web_query.create_command(
            type_,
            request,
            await create_response_json(message, response)
        )
        if (msg := res[0].get('message')) == 'Create':
            await message.answer(f'–∫–æ–º–∞–Ω–¥–∞ "{request}" –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        else:
            await message.answer(f'–≤—ã —ç—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å: {msg}')
    elif not request:
        await message.answer(f'–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–∞–ø—Ä–æ—Å–∞, –æ–Ω –ø–∏—à–µ—Ç—Å—è –ø–µ—Ä–µ–¥ ":"')


@bl.message(text='<request>')
async def get_command(message: Message, request: str):
    data = json.loads(await get_data(request))
    if data.get('message') or data.get('attch'):
        await message.answer(
            message=data.get('message'),
            attachment=data.get('attch')
        )
